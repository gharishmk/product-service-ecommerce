version: "3.8"

services:
    product-service:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: product-service
        ports:
            - "8082:8082"
        environment:
            - PORT=8082
            - MONGODB_URI=mongodb://prodsrv:prodpass@mongodb:27017/productdb?authSource=productdb
            - JWT_SECRET=${JWT_SECRET}
            - SERVICE_SECRET=${SERVICE_SECRET}
        depends_on:
            mongodb:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - ecommerce-network
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--no-verbose",
                    "--tries=1",
                    "--spider",
                    "http://localhost:8082/health",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    mongodb:
        image: mongo:4.4
        container_name: mongodb
        ports:
            - "27018:27017"
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: admin123
        volumes:
            - mongodb_data:/data/db
            - ../mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
        command: --auth
        networks:
            - ecommerce-network
        healthcheck:
            test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        environment:
            - RABBITMQ_DEFINITIONS_FILE=/etc/rabbitmq/definitions.json
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
            - ../rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
        networks:
            - ecommerce-network
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "check_running"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

volumes:
    mongodb_data:
    rabbitmq_data:

networks:
    ecommerce-network:
        driver: bridge
